--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            56
  Column:          27
Function:        'Quadtree.init(x:y:w:h:capacity:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift._allocateUninitializedArray<A>(_:)"'
  - String:          ' with type '
  - FuncType:        '(Builtin.Word) -> (@owned Array<Point>, Builtin.RawPointer)'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            56
  Column:          27
Function:        'Quadtree.init(x:y:w:h:capacity:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.init(arrayLiteral:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @thin Array<Point>.Type) -> @owned Array<Point>'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            56
  Column:          27
Function:        'Quadtree.init(x:y:w:h:capacity:)'
Args:            
  - Callee:          '"specialized Swift.Array.init(arrayLiteral:)"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            65
  Column:          41
Function:        'Quadtree.init(x:y:w:h:capacity:)'
Args:            
  - Callee:          '"main.Point.init(x:y:)"'
    DebugLoc:        
      File:            main.swift
      Line:            11
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            65
  Column:          23
Function:        'Quadtree.init(x:y:w:h:capacity:)'
Args:            
  - Callee:          '"main.Rectangle.init(center:width:height:)"'
    DebugLoc:        
      File:            main.swift
      Line:            30
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.__allocating_init(x:y:w:h:capacity:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            23
  Column:          20
Function:        'static Rectangle.== infix(_:_:)'
Args:            
  - Callee:          '"static main.Point.== infix(_:_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            4
      Column:          24
  - String:          ' inlined into '
  - Caller:          '"static main.Rectangle.== infix(_:_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            22
      Column:          24
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            54
  Column:          7
Function:        Quadtree.__deallocating_deinit
Args:            
  - Callee:          '"main.Quadtree.deinit"'
    DebugLoc:        
      File:            main.swift
      Line:            54
      Column:          7
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.__deallocating_deinit"'
    DebugLoc:        
      File:            main.swift
      Line:            54
      Column:          7
  - String:          ' (cost = '
  - Cost:            '15'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            122
  Column:          28
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            123
  Column:          28
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            121
  Column:          25
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Quadtree.__allocating_init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '2'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            129
  Column:          27
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            130
  Column:          27
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            128
  Column:          26
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Quadtree.__allocating_init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '2'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            136
  Column:          27
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            137
  Column:          27
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            135
  Column:          28
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Quadtree.__allocating_init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '2'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            143
  Column:          27
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            144
  Column:          27
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            142
  Column:          29
Function:        'Quadtree.divide()'
Args:            
  - Callee:          '"main.Quadtree.__allocating_init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '2'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            40
  Column:          26
Function:        'Rectangle.contains(point:)'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            41
  Column:          13
Function:        'Rectangle.contains(point:)'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            42
  Column:          13
Function:        'Rectangle.contains(point:)'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            43
  Column:          13
Function:        'Rectangle.contains(point:)'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            70
  Column:          16
Function:        'Quadtree.contains(point:)'
Args:            
  - Callee:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            69
      Column:          10
  - String:          ' (cost = '
  - Cost:            '13'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            80
  Column:          19
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.count.getter"'
  - String:          ' with type '
  - FuncType:        '(@guaranteed Array<Point>) -> Int'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            96
  Column:          20
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append(_:)"'
  - String:          ' with type '
  - FuncType:        '(Point, @inout Array<Point>) -> ()'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            80
  Column:          19
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"specialized Swift.Array.count.getter"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            96
  Column:          20
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"specialized Swift.Array.append(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            81
  Column:          17
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"main.Quadtree.has_children.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            77
      Column:          28
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '4'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '94'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            84
  Column:          25
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"main.Quadtree.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            69
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '18'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            86
  Column:          33
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"main.Quadtree.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            69
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '18'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            88
  Column:          35
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"main.Quadtree.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            69
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '18'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            90
  Column:          36
Function:        'Quadtree.insert(point:)'
Args:            
  - Callee:          '"main.Quadtree.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            69
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.insert(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            79
      Column:          10
  - String:          ' (cost = '
  - Cost:            '18'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '94'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            153
  Column:          18
Function:        'Quadtree.clear()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.init(arrayLiteral:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @thin Array<Point>.Type) -> @owned Array<Point>'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            153
  Column:          18
Function:        'Quadtree.clear()'
Args:            
  - Callee:          '"specialized Swift.Array.init(arrayLiteral:)"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.clear()"'
    DebugLoc:        
      File:            main.swift
      Line:            152
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            181
  Column:          24
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.init()"'
  - String:          ' with type '
  - FuncType:        '(@thin Array<Point>.Type) -> @owned Array<Point>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            183
  Column:          15
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Range.init(uncheckedBounds:)"'
  - String:          ' with type '
  - FuncType:        '(Int, Int, @thin Range<Int>.Type) -> Range<Int>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            183
  Column:          14
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Collection<>.makeIterator()"'
  - String:          ' with type '
  - FuncType:        '(Range<Int>) -> IndexingIterator<Range<Int>>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            183
  Column:          11
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.IndexingIterator.next()"'
  - String:          ' with type '
  - FuncType:        '(@inout IndexingIterator<Range<Int>>) -> Optional<Int>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            184
  Column:          19
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Range.init(uncheckedBounds:)"'
  - String:          ' with type '
  - FuncType:        '(Int, Int, @thin Range<Int>.Type) -> Range<Int>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            184
  Column:          18
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Collection<>.makeIterator()"'
  - String:          ' with type '
  - FuncType:        '(Range<Int>) -> IndexingIterator<Range<Int>>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            184
  Column:          15
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.IndexingIterator.next()"'
  - String:          ' with type '
  - FuncType:        '(@inout IndexingIterator<Range<Int>>) -> Optional<Int>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            185
  Column:          40
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Range.init(uncheckedBounds:)"'
  - String:          ' with type '
  - FuncType:        '(Double, Double, @thin Range<Double>.Type) -> Range<Double>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            185
  Column:          28
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"static Swift.BinaryFloatingPoint<>.random(in:)"'
  - String:          ' with type '
  - FuncType:        '(Range<Double>, @thick Double.Type) -> Double'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            186
  Column:          40
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Range.init(uncheckedBounds:)"'
  - String:          ' with type '
  - FuncType:        '(Double, Double, @thin Range<Double>.Type) -> Range<Double>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            186
  Column:          28
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"static Swift.BinaryFloatingPoint<>.random(in:)"'
  - String:          ' with type '
  - FuncType:        '(Range<Double>, @thick Double.Type) -> Double'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            189
  Column:          20
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append(_:)"'
  - String:          ' with type '
  - FuncType:        '(Point, @inout Array<Point>) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          28
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Collection.map<A>(_:)"'
  - String:          ' with type '
  - FuncType:        '(@noescape @callee_guaranteed (@in_guaranteed Point) -> (@out Int, @error Error), @guaranteed Array<Point>) -> (@owned Array<Int>, @error Error)'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          78
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Sequence.reduce<A>(_:_:)"'
  - String:          ' with type '
  - FuncType:        '(Int, @noescape @callee_guaranteed (@in_guaranteed Int, @in_guaranteed Int) -> (@out Int, @error Error), @guaranteed Array<Int>) -> (Int, @error Error)'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          15
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift._allocateUninitializedArray<A>(_:)"'
  - String:          ' with type '
  - FuncType:        '(Builtin.Word) -> (@owned Array<Any>, Builtin.RawPointer)'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          23
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.DefaultStringInterpolation.appendInterpolation<A>(_:)"'
  - String:          ' with type '
  - FuncType:        '(Int, @inout DefaultStringInterpolation) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          35
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.DefaultStringInterpolation.appendInterpolation<A>(_:)"'
  - String:          ' with type '
  - FuncType:        '(Int, @inout DefaultStringInterpolation) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            196
  Column:          18
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.init(arrayLiteral:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @thin Array<Point>.Type) -> @owned Array<Point>'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            180
  Column:          14
Function:        'main()'
Args:            
  - Callee:          '"main.Quadtree.__allocating_init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '2'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            183
  Column:          15
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Range.init(uncheckedBounds:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            184
  Column:          19
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Range.init(uncheckedBounds:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            185
  Column:          40
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Range.init(uncheckedBounds:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '76'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            185
  Column:          28
Function:        'main()'
Args:            
  - Callee:          '"specialized static Swift.BinaryFloatingPoint<>.random(in:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '76'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            186
  Column:          40
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Range.init(uncheckedBounds:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '76'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            186
  Column:          28
Function:        'main()'
Args:            
  - Callee:          '"specialized static Swift.BinaryFloatingPoint<>.random(in:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '76'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            187
  Column:          21
Function:        'main()'
Args:            
  - Callee:          '"main.Point.init(x:y:)"'
    DebugLoc:        
      File:            main.swift
      Line:            11
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '76'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            189
  Column:          20
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Array.append(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '76'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          28
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Collection.map<A>(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '47'
  - String:          ', benefit = '
  - Benefit:         '118'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          78
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Sequence.reduce<A>(_:_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '26'
  - String:          ', benefit = '
  - Benefit:         '134'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          15
Function:        'main()'
Args:            
  - Callee:          '"Swift.DefaultStringInterpolation.init(literalCapacity:interpolationCount:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '13'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          16
Function:        'main()'
Args:            
  - Callee:          '"Swift.DefaultStringInterpolation.appendLiteral(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          23
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.DefaultStringInterpolation.appendInterpolation<A>(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '6'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          26
Function:        'main()'
Args:            
  - Callee:          '"Swift.DefaultStringInterpolation.appendLiteral(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          35
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.DefaultStringInterpolation.appendInterpolation<A>(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '6'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          42
Function:        'main()'
Args:            
  - Callee:          '"Swift.DefaultStringInterpolation.appendLiteral(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          15
Function:        'main()'
Args:            
  - Callee:          '"default argument 1 of Swift.print(_:separator:terminator:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          15
Function:        'main()'
Args:            
  - Callee:          '"default argument 2 of Swift.print(_:separator:terminator:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            196
  Column:          18
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Array.init(arrayLiteral:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          70
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.count.getter"'
  - String:          ' with type '
  - FuncType:        '(@guaranteed Array<Point>) -> Int'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          37
Function:        'main()'
Args:            
  - Callee:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '15'
  - String:          ', benefit = '
  - Benefit:         '68'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          70
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Array.count.getter"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '68'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          102
Function:        'main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift._ArrayProtocol.filter(_:)"'
  - String:          ' with type '
  - FuncType:        '(@noescape @callee_guaranteed (@in_guaranteed Point) -> (Bool, @error Error), @owned Array<Point>) -> (@owned Array<Point>, @error Error)'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          39
Function:        'main()'
Args:            
  - Callee:          '"main.Point.init(x:y:)"'
    DebugLoc:        
      File:            main.swift
      Line:            11
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          21
Function:        'main()'
Args:            
  - Callee:          '"main.Rectangle.init(center:width:height:)"'
    DebugLoc:        
      File:            main.swift
      Line:            30
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          115
Function:        'main()'
Args:            
  - Callee:          '"curry thunk of main.Point.overlaps(_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            164
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          102
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift._ArrayProtocol.filter(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '40'
  - String:          ', benefit = '
  - Benefit:         '190'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            165
  Column:          14
Function:        'main()'
Args:            
  - Callee:          '"static main.Point.== infix(_:_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            4
      Column:          24
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '180'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            165
  Column:          23
Function:        'main()'
Args:            
  - Callee:          '"main.Point.distance(to:)"'
    DebugLoc:        
      File:            main.swift
      Line:            16
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '6'
  - String:          ', benefit = '
  - Benefit:         '140'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            200
  Column:          1
Function:        main
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '196'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            47
  Column:          17
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            47
  Column:          40
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            48
  Column:          13
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            48
  Column:          13
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.x.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            36
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            49
  Column:          13
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            49
  Column:          13
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            50
  Column:          13
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            50
  Column:          13
Function:        'Rectangle.intersects(rectangle:)'
Args:            
  - Callee:          '"main.Rectangle.y.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            37
      Column:          19
  - String:          ' inlined into '
  - Caller:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            74
  Column:          16
Function:        'Quadtree.intersects(area:)'
Args:            
  - Callee:          '"main.Rectangle.intersects(rectangle:)"'
    DebugLoc:        
      File:            main.swift
      Line:            46
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' (cost = '
  - Cost:            '18'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            101
  Column:          27
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.init()"'
  - String:          ' with type '
  - FuncType:        '(@thin Array<Point>.Type) -> @owned Array<Point>'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          45
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift._ArrayProtocol.filter(_:)"'
  - String:          ' with type '
  - FuncType:        '(@noescape @callee_guaranteed (@in_guaranteed Point) -> (Bool, @error Error), @owned Array<Point>) -> (@owned Array<Point>, @error Error)'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append<A>(contentsOf:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @inout Array<Point>) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append<A>(contentsOf:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @inout Array<Point>) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append<A>(contentsOf:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @inout Array<Point>) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append<A>(contentsOf:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @inout Array<Point>) -> ()'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.append<A>(contentsOf:)"'
  - String:          ' with type '
  - FuncType:        '(@owned Array<Point>, @inout Array<Point>) -> ()'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            102
  Column:          18
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' (cost = '
  - Cost:            '23'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          45
Function:        'Quadtree.query(area:)'
Args:            
  - Callee:          '"specialized Swift._ArrayProtocol.filter(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.query(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            100
      Column:          10
  - String:          ' (cost = '
  - Cost:            '40'
  - String:          ', benefit = '
  - Benefit:         '118'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            106
  Column:          21
Function:        'Quadtree.query(area:)'
Args:            
  - Callee:          '"main.Quadtree.has_children.getter"'
    DebugLoc:        
      File:            main.swift
      Line:            77
      Column:          28
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.query(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            100
      Column:          10
  - String:          ' (cost = '
  - Cost:            '4'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            102
  Column:          18
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' (cost = '
  - Cost:            '23'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            102
  Column:          18
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' (cost = '
  - Cost:            '23'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            102
  Column:          18
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' (cost = '
  - Cost:            '23'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          56
Function:        'Quadtree.query(area:)'
Args:            
  - Callee:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.query(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            100
      Column:          10
  - String:          ' (cost = '
  - Cost:            '13'
  - String:          ', benefit = '
  - Benefit:         '84'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            102
  Column:          18
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' (cost = '
  - Cost:            '23'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '57'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          56
Function:        'closure #1 in Quadtree.query(area:)'
Args:            
  - Callee:          '"main.Rectangle.contains(point:)"'
    DebugLoc:        
      File:            main.swift
      Line:            39
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"closure #1 in main.Quadtree.query(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            105
      Column:          52
  - String:          ' (cost = '
  - Cost:            '13'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          102
Function:        'Quadtree.points(around:within:)'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift._ArrayProtocol.filter(_:)"'
  - String:          ' with type '
  - FuncType:        '(@noescape @callee_guaranteed (@in_guaranteed Point) -> (Bool, @error Error), @owned Array<Point>) -> (@owned Array<Point>, @error Error)'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          39
Function:        'Quadtree.points(around:within:)'
Args:            
  - Callee:          '"main.Point.init(x:y:)"'
    DebugLoc:        
      File:            main.swift
      Line:            11
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          21
Function:        'Quadtree.points(around:within:)'
Args:            
  - Callee:          '"main.Rectangle.init(center:width:height:)"'
    DebugLoc:        
      File:            main.swift
      Line:            30
      Column:          5
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          115
Function:        'Quadtree.points(around:within:)'
Args:            
  - Callee:          '"curry thunk of main.Point.overlaps(_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            164
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            117
  Column:          102
Function:        'Quadtree.points(around:within:)'
Args:            
  - Callee:          '"specialized Swift._ArrayProtocol.filter(_:)"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '40'
  - String:          ', benefit = '
  - Benefit:         '118'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            165
  Column:          14
Function:        'Quadtree.points(around:within:)'
Args:            
  - Callee:          '"static main.Point.== infix(_:_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            4
      Column:          24
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '84'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            165
  Column:          23
Function:        'Quadtree.points(around:within:)'
Args:            
  - Callee:          '"main.Point.distance(to:)"'
    DebugLoc:        
      File:            main.swift
      Line:            16
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '6'
  - String:          ', benefit = '
  - Benefit:         '68'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            165
  Column:          14
Function:        'Point.overlaps(_:)'
Args:            
  - Callee:          '"static main.Point.== infix(_:_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            4
      Column:          24
  - String:          ' inlined into '
  - Caller:          '"main.Point.overlaps(_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            164
      Column:          10
  - String:          ' (cost = '
  - Cost:            '5'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            165
  Column:          23
Function:        'Point.overlaps(_:)'
Args:            
  - Callee:          '"main.Point.distance(to:)"'
    DebugLoc:        
      File:            main.swift
      Line:            16
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Point.overlaps(_:)"'
    DebugLoc:        
      File:            main.swift
      Line:            164
      Column:          10
  - String:          ' (cost = '
  - Cost:            '6'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-generic-specializer
Name:            sil.Specialized
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          70
Function:        'closure #1 in main()'
Args:            
  - String:          'Specialized function '
  - Function:        '"Swift.Array.count.getter"'
  - String:          ' with type '
  - FuncType:        '(@guaranteed Array<Point>) -> Int'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          37
Function:        'closure #1 in main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '41'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          70
Function:        'closure #1 in main()'
Args:            
  - Callee:          '"specialized Swift.Array.count.getter"'
  - String:          ' inlined into '
  - Caller:          '"closure #1 in main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            192
      Column:          32
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            192
  Column:          37
Function:        'closure #1 in main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.points(around:within:)"'
    DebugLoc:        
      File:            main.swift
      Line:            116
      Column:          10
  - String:          ' (cost = '
  - Cost:            '41'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '86'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '86'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            101
  Column:          27
Function:        'Quadtree.query(area:)'
Args:            
  - Callee:          '"specialized Swift.Array.init()"'
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.query(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            100
      Column:          10
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            102
  Column:          18
Function:        'Quadtree.query(area:)'
Args:            
  - Callee:          '"main.Quadtree.intersects(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            73
      Column:          10
  - String:          ' inlined into '
  - Caller:          '"main.Quadtree.query(area:)"'
    DebugLoc:        
      File:            main.swift
      Line:            100
      Column:          10
  - String:          ' (cost = '
  - Cost:            '26'
  - String:          ', benefit = '
  - Benefit:         '40'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            105
  Column:          19
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            107
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            108
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            109
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            110
  Column:          23
Function:        'Quadtree.query(area:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"specialized Swift.Array.append<A>(contentsOf:)"'
  - String:          ' (cost = '
  - Cost:            '63'
  - String:          ', benefit = '
  - Benefit:         '25'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            181
  Column:          24
Function:        'main()'
Args:            
  - Callee:          '"specialized Swift.Array.init()"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '1'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Passed
Pass:            sil-inliner
Name:            sil.Inlined
DebugLoc:        
  File:            main.swift
  Line:            194
  Column:          15
Function:        'main()'
Args:            
  - Callee:          '"Swift.String.init(stringInterpolation:)"'
  - String:          ' inlined into '
  - Caller:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '0'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            200
  Column:          1
Function:        main
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '508'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'Quadtree.divide()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '86'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'specialized Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '86'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            82
  Column:          17
Function:        'specialized Quadtree.insert(point:)'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.divide()"'
    DebugLoc:        
      File:            main.swift
      Line:            120
      Column:          10
  - String:          ' (cost = '
  - Cost:            '86'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            64
  Column:          5
Function:        'main()'
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.Quadtree.init(x:y:w:h:capacity:)"'
    DebugLoc:        
      File:            main.swift
      Line:            64
      Column:          5
  - String:          ' (cost = '
  - Cost:            '32'
  - String:          ', benefit = '
  - Benefit:         '30'
  - String:          ')'
...
--- !Missed
Pass:            sil-inliner
Name:            sil.NoInlinedCost
DebugLoc:        
  File:            main.swift
  Line:            200
  Column:          1
Function:        main
Args:            
  - String:          'Not profitable to inline function '
  - Callee:          '"main.main()"'
    DebugLoc:        
      File:            main.swift
      Line:            169
      Column:          6
  - String:          ' (cost = '
  - Cost:            '290'
  - String:          ', benefit = '
  - Benefit:         '20'
  - String:          ')'
...
